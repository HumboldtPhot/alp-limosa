{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;AAAA;;AAEA,SAAS,aAAT,EAAwB,kBAAxB,QAAkD,QAAlD;;AAEA,SAAS,aAAT,QAA8B,QAA9B;;AAEA,eAAe,SAAS,SAAT,CAAmB,aAAnB,EAA4C,WAA5C,EAA8D;AAAA,eAA3C,aAA2C;AAAA,2HAA3C,aAA2C;AAAA;;AAAA,QAAlB,WAAkB;AAAA,oHAAlB,WAAkB;AAAA;;AAC3E,SAAO,UAAC,GAAD,EAAS;AACd,QAAM,SAAS,IAAI,MAAnB;AACA,QAAM,0BAA+B,OAAO,GAAP,CAAW,mBAAX,CAArC;;AAFc,UAER,uBAFQ;AAAA,kIAER,uBAFQ;AAAA;;AAGd,QAAM,oBAAoB,IAAI,kBAAJ,CAAuB,uBAAvB,CAA1B;AACA,QAAM,UAAU,IAAI,aAAJ,CAAkB,iBAAlB,EAAqC,OAAO,GAAP,CAAW,oBAAX,CAArC,CAAhB;AACA,kBAAc,OAAd;AACA,QAAM,SAAS,IAAI,MAAJ,GAAa,QAAQ,MAApC;;AAEA,QAAI,OAAJ,CAAY,YAAZ,GAA2B,YAAY;AACrC;AACA,aAAO,OAAO,YAAP,gBAAoB,KAAK,QAAzB,oCAAsC,SAAtC,GAAP;AACD,KAHD;;AAKA,QAAI,OAAJ,CAAY,UAAZ,GAAyB,UAAU,EAAV,EAAsB,MAAtB,EAAuC;AAAA,mBAA7B,EAA6B;AAAA,kHAA7B,EAA6B;AAAA;;AAAA,YAAjB,MAAiB,YAAjB,MAAiB,YAAR,MAAQ;AAAA,uHAAjB,MAAiB;AAAA;;AAC9D;AACA,aAAO,KAAK,QAAL,CAAc,OAAO,YAAP,CAAoB,KAAK,QAAzB,EAAmC,EAAnC,EAAuC,MAAvC,CAAd,CAAP;AACD,KAHD;;AAKA,QAAI,WAAJ,GAAkB,WAAlB;;AAQA;;;;;;AAMA,QAAI,OAAJ,CAAY,UAAZ,GAAyB,UAAU,cAAV,EAAkC,UAAlC,EAAuD;AAAA,mBAA7C,cAA6C;AAAA,8HAA7C,cAA6C;AAAA;;AAAA,YAArB,UAAqB,mBAArB,UAAqB;AAAA,2HAArB,UAAqB;AAAA;;AAC9E,UAAM,QAAQ,KAAK,KAAnB;;AAEA,UAAI,CAAC,UAAL,EAAiB;AACf,qBAAa,cAAb;AACA,yBAAiB,MAAM,UAAvB;AACD;;AAED,UAAM,aAAa,YAAY,GAAZ,CAAgB,cAAhB,CAAnB;AACA,UAAI,CAAC,UAAL,EAAiB;AACf,aAAK,MAAL,GAAc,GAAd;AACA,cAAM,IAAI,KAAJ,4BAAmC,cAAnC,CAAN;AACD;;AAED,UAAM,SAAS,WAAW,UAAX,CAAf;AACA,UAAI,CAAC,MAAL,CAAW,wBAAX,EAAqC;AACnC,eAAK,MAAL,GAAc,GAAd;AACA,gBAAM,IAAI,KAAJ,wBAA+B,MAAM,UAArC,SAAmD,MAAM,MAAzD,CAAN;AACD;;AAED,UAAI;AACF,eAAO,QAAQ,OAAR,CAAgB,WAAW,UAAX,EAAuB,IAAvB,CAA4B,IAA5B,EAAkC,IAAlC,CAAhB,CAAP;AACD,OAFD,CAEE,OAAO,GAAP,EAAY;AACZ,eAAO,QAAQ,MAAR,CAAe,GAAf,CAAP;AACD;AACF,KAzBD;;AA2BA,WAAO,UAAC,GAAD,EAAS;AACd,UAAI,QAAQ,OAAO,IAAP,CAAY,IAAI,IAAhB,EAAsB,IAAI,QAA1B,CAAZ;;AAEA,UAAI,CAAC,KAAL,EAAY;AACV,YAAI,MAAJ,GAAa,GAAb;AACA,cAAM,IAAI,KAAJ,uBAA8B,IAAI,IAAlC,CAAN;AACD;;AAED,UAAI,KAAJ,GAAY,KAAZ;;AAEA,aAAO,IAAI,UAAJ,CAAe,MAAM,UAArB,EAAiC,MAAM,MAAvC,CAAP;AACD,KAXD;AAYD,GAvED;AAwED","file":"index.js","sourcesContent":["/* global BROWSER */\n\nimport { RouterBuilder, RoutesTranslations } from 'limosa';\n\nexport { RouterBuilder } from 'limosa';\n\nexport default function alpLimosa(routerBuilder: Function, controllers: Map) {\n  return (app) => {\n    const config = app.config;\n    const routeTranslationsConfig: Map = config.get('routeTranslations');\n    const routeTranslations = new RoutesTranslations(routeTranslationsConfig);\n    const builder = new RouterBuilder(routeTranslations, config.get('availableLanguages'));\n    routerBuilder(builder);\n    const router = app.router = builder.router;\n\n    app.context.urlGenerator = function () {\n      // eslint-disable-next-line prefer-rest-params\n      return router.urlGenerator(this.language, ...arguments);\n    };\n\n    app.context.redirectTo = function (to: string, params: ?Object) {\n      // eslint-disable-next-line prefer-rest-params\n      return this.redirect(router.urlGenerator(this.language, to, params));\n    };\n\n    app.controllers = controllers;\n\n    if (!BROWSER) {\n      app.registerBrowserContextTransformer((initialBrowserContext, ctx) => (\n        initialBrowserContext.route = ctx.route\n      ));\n    }\n\n    /**\n     *\n     * @param {string} controllerName\n     * @param {string} [actionName]\n     * @returns {*}\n     */\n    app.context.callAction = function (controllerName: string, actionName: ?string) {\n      const route = this.route;\n\n      if (!actionName) {\n        actionName = controllerName;\n        controllerName = route.controller;\n      }\n\n      const controller = controllers.get(controllerName);\n      if (!controller) {\n        this.status = 404;\n        throw new Error(`Controller not found: ${controllerName}`);\n      }\n\n      const action = controller[actionName];\n      if (!action/* || !action.isAction*/) {\n        this.status = 404;\n        throw new Error(`Action not found: ${route.controller}.${route.action}`);\n      }\n\n      try {\n        return Promise.resolve(controller[actionName].call(null, this));\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    };\n\n    return (ctx) => {\n      let route = router.find(ctx.path, ctx.language);\n\n      if (!route) {\n        ctx.status = 404;\n        throw new Error(`Route not found: ${ctx.path}`);\n      }\n\n      ctx.route = route;\n\n      return ctx.callAction(route.controller, route.action);\n    };\n  };\n}\n"]}
{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import { RouterBuilder, RoutesTranslations } from 'limosa';\n\nexport default function aukLimosa(routerBuilder, controllers) {\n    if (!controllers instanceof Map) {\n        throw new Error('controllers should be a Map');\n    }\n\n    return (app) => {\n        const config = app.config;\n        const routeTranslationsConfig = config.get('routeTranslations');\n        const routeTranslations = new RoutesTranslations(routeTranslationsConfig);\n        const builder = new RouterBuilder(routeTranslations, config.get('availableLanguages'));\n        routerBuilder(builder);\n        const router = app.router = builder.router;\n\n        app.context.urlGenerator = function () {\n            return router.urlGenerator(this.language, ...arguments);\n        };\n\n        app.controllers = controllers;\n\n        /**\n         *\n         * @param {string} controllerName\n         * @param {string} actionName\n         * @returns {*}\n         */\n        app.context.callAction = function (controllerName, actionName) {\n            const route = this.route;\n\n            if (!actionName) {\n                actionName = controllerName;\n                controllerName = route.controller;\n            }\n\n            const controller = controllers.get(controllerName);\n            if (!controller) {\n                this.status = 404;\n                throw new Error('Controller not found: ' + controllerName);\n            }\n\n            const action = controller[actionName];\n            if (!action/* || !action.isAction*/) {\n                this.status = 404;\n                throw new Error('Action not found: ' + route.controller + '.' + route.action);\n            }\n\n            try {\n                return Promise.resolve(controller[actionName].call(null, this));\n            } catch (err) {\n                return Promise.reject(err);\n            }\n        };\n\n        return (ctx) => {\n            let route = router.find(ctx.path);\n\n            if (!route) {\n                ctx.status = 404;\n                throw new Error('Route not found: ' + ctx.path);\n            }\n\n            const controller = app.controllers.get(route.controller);\n            if (!controller) {\n                ctx.status = 404;\n                throw new Error('Controller not found: ' + route.controller);\n            }\n\n            ctx.route = route;\n\n            return ctx.callAction(route.controller, route.action);\n        };\n    };\n}\n"]}
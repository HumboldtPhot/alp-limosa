{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;kBAEwB;;;;;;;;EAAT,SAAS,SAAT,CAAmB,aAAnB,EAAkC,WAAlC,EAA+C;AAC1D,QAAI,CAAC,WAAD,YAAwB,GAAxB,EAA6B;AAC7B,cAAM,IAAI,KAAJ,CAAU,6BAAV,CAAN,CAD6B;KAAjC;;AAIA,WAAO,OAAS;AACZ,cAAM,SAAS,IAAI,MAAJ,CADH;AAEZ,cAAM,0BAA0B,OAAO,GAAP,CAAW,mBAAX,CAA1B,CAFM;AAGZ,cAAM,oBAAoB,+BAAuB,uBAAvB,CAApB,CAHM;AAIZ,cAAM,UAAU,0BAAkB,iBAAlB,EAAqC,OAAO,GAAP,CAAW,oBAAX,CAArC,CAAV,CAJM;AAKZ,sBAAc,OAAd,EALY;AAMZ,cAAM,SAAS,IAAI,MAAJ,GAAa,QAAQ,MAAR,CANhB;;AAQZ,YAAI,OAAJ,CAAY,YAAZ;;qCAA2B,YAAY;AACnC,mBAAO,OAAO,YAAP,CAAoB,KAAK,QAAL,EAAe,GAAG,SAAH,CAA1C,CADmC;SAAZ,CARf;;AAYZ,YAAI,WAAJ,GAAkB,WAAlB;;;;;;;;AAZY,WAoBZ,CAAI,OAAJ,CAAY,UAAZ;;;;mCAAyB,UAAU,cAAV,EAA0B,UAA1B,EAAsC;AAC3D,kBAAM,QAAQ,KAAK,KAAL,CAD6C;;AAG3D,gBAAI,CAAC,UAAD,EAAa;AACb,6BAAa,cAAb,CADa;AAEb,iCAAiB,MAAM,UAAN,CAFJ;aAAjB;;AAKA,kBAAM,aAAa,YAAY,GAAZ,CAAgB,cAAhB,CAAb,CARqD;AAS3D,gBAAI,CAAC,UAAD,EAAa;AACb,qBAAK,MAAL,GAAc,GAAd,CADa;AAEb,sBAAM,IAAI,KAAJ,CAAU,CAAC,sBAAD,GAAyB,cAAzB,EAAwC,CAAlD,CAAN,CAFa;aAAjB;;AAKA,kBAAM,SAAS,WAAW,UAAX,CAAT,CAdqD;AAe3D,gBAAI,CAAC,MAAD,yBAAJ,EAAqC;AACjC,yBAAK,MAAL,GAAc,GAAd,CADiC;AAEjC,0BAAM,IAAI,KAAJ,CAAU,CAAC,kBAAD,GAAqB,MAAM,UAAN,EAAiB,CAAtC,GAAyC,MAAM,MAAN,EAAa,CAAhE,CAAN,CAFiC;iBAArC;;AAKA,gBAAI;AACA,uBAAO,QAAQ,OAAR,CAAgB,WAAW,UAAX,EAAuB,IAAvB,CAA4B,IAA5B,EAAkC,IAAlC,CAAhB,CAAP,CADA;aAAJ,CAEE,OAAO,GAAP,EAAY;AACV,uBAAO,QAAQ,MAAR,CAAe,GAAf,CAAP,CADU;aAAZ;SAtBmB,CApBb;;AA+CZ,eAAO,OAAS;AACZ,gBAAI,QAAQ,OAAO,IAAP,CAAY,IAAI,IAAJ,CAApB,CADQ;;AAGZ,gBAAI,CAAC,KAAD,EAAQ;AACR,oBAAI,MAAJ,GAAa,GAAb,CADQ;AAER,sBAAM,IAAI,KAAJ,CAAU,CAAC,iBAAD,GAAoB,IAAI,IAAJ,EAAS,CAAvC,CAAN,CAFQ;aAAZ;;AAKA,kBAAM,aAAa,IAAI,WAAJ,CAAgB,GAAhB,CAAoB,MAAM,UAAN,CAAjC,CARM;AASZ,gBAAI,CAAC,UAAD,EAAa;AACb,oBAAI,MAAJ,GAAa,GAAb,CADa;AAEb,sBAAM,IAAI,KAAJ,CAAU,CAAC,sBAAD,GAAyB,MAAM,UAAN,EAAiB,CAApD,CAAN,CAFa;aAAjB;;AAKA,gBAAI,KAAJ,GAAY,KAAZ,CAdY;;AAgBZ,mBAAO,IAAI,UAAJ,CAAe,MAAM,UAAN,EAAkB,MAAM,MAAN,CAAxC,CAhBY;SAAT,CA/CK;KAAT,CALmD;CAA/C","file":"index.js","sourcesContent":["import { RouterBuilder, RoutesTranslations } from 'limosa';\n\nexport default function aukLimosa(routerBuilder, controllers) {\n    if (!controllers instanceof Map) {\n        throw new Error('controllers should be a Map');\n    }\n\n    return (app) => {\n        const config = app.config;\n        const routeTranslationsConfig = config.get('routeTranslations');\n        const routeTranslations = new RoutesTranslations(routeTranslationsConfig);\n        const builder = new RouterBuilder(routeTranslations, config.get('availableLanguages'));\n        routerBuilder(builder);\n        const router = app.router = builder.router;\n\n        app.context.urlGenerator = function () {\n            return router.urlGenerator(this.language, ...arguments);\n        };\n\n        app.controllers = controllers;\n\n        /**\n         *\n         * @param {string} controllerName\n         * @param {string} actionName\n         * @returns {*}\n         */\n        app.context.callAction = function (controllerName, actionName) {\n            const route = this.route;\n\n            if (!actionName) {\n                actionName = controllerName;\n                controllerName = route.controller;\n            }\n\n            const controller = controllers.get(controllerName);\n            if (!controller) {\n                this.status = 404;\n                throw new Error(`Controller not found: ${controllerName}`);\n            }\n\n            const action = controller[actionName];\n            if (!action/* || !action.isAction*/) {\n                this.status = 404;\n                throw new Error(`Action not found: ${route.controller}.${route.action}`);\n            }\n\n            try {\n                return Promise.resolve(controller[actionName].call(null, this));\n            } catch (err) {\n                return Promise.reject(err);\n            }\n        };\n\n        return (ctx) => {\n            let route = router.find(ctx.path);\n\n            if (!route) {\n                ctx.status = 404;\n                throw new Error(`Route not found: ${ctx.path}`);\n            }\n\n            const controller = app.controllers.get(route.controller);\n            if (!controller) {\n                ctx.status = 404;\n                throw new Error(`Controller not found: ${route.controller}`);\n            }\n\n            ctx.route = route;\n\n            return ctx.callAction(route.controller, route.action);\n        };\n    };\n}\n"]}
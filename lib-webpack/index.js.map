{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"AAAA,SAAS,aAAT,EAAwB,kBAAxB,QAAkD,QAAlD;;AAEA,eAAe,SAAS,SAAT,CAAmB,aAAnB,EAAkC,WAAlC,EAA+C;AAC1D,QAAI,CAAC,WAAD,YAAwB,GAA5B,EAAiC;AAC7B,cAAM,IAAI,KAAJ,CAAU,6BAAV,CAAN;AACH;;AAED,WAAO,UAAC,GAAD,EAAS;AACZ,YAAM,SAAS,IAAI,MAAnB;AACA,YAAM,0BAA0B,OAAO,GAAP,CAAW,mBAAX,CAAhC;AACA,YAAM,oBAAoB,IAAI,kBAAJ,CAAuB,uBAAvB,CAA1B;AACA,YAAM,UAAU,IAAI,aAAJ,CAAkB,iBAAlB,EAAqC,OAAO,GAAP,CAAW,oBAAX,CAArC,CAAhB;AACA,sBAAc,OAAd;AACA,YAAM,SAAS,IAAI,MAAJ,GAAa,QAAQ,MAApC;;AAEA,YAAI,OAAJ,CAAY,YAAZ,GAA2B,YAAY;AACnC,mBAAO,OAAO,YAAP,gBAAoB,KAAK,QAAzB,oCAAsC,SAAtC,GAAP,C;AACH,SAFD;;AAIA,YAAI,WAAJ,GAAkB,WAAlB;;;;;;;;AAQA,YAAI,OAAJ,CAAY,UAAZ,GAAyB,UAAU,cAAV,EAA0B,UAA1B,EAAsC;AAC3D,gBAAM,QAAQ,KAAK,KAAnB;;AAEA,gBAAI,CAAC,UAAL,EAAiB;AACb,6BAAa,cAAb;AACA,iCAAiB,MAAM,UAAvB;AACH;;AAED,gBAAM,aAAa,YAAY,GAAZ,CAAgB,cAAhB,CAAnB;AACA,gBAAI,CAAC,UAAL,EAAiB;AACb,qBAAK,MAAL,GAAc,GAAd;AACA,sBAAM,IAAI,KAAJ,4BAAmC,cAAnC,CAAN;AACH;;AAED,gBAAM,SAAS,WAAW,UAAX,CAAf;AACA,gBAAI,CAAC,M,yBAAL,EAAqC;AACjC,yBAAK,MAAL,GAAc,GAAd;AACA,0BAAM,IAAI,KAAJ,wBAA+B,MAAM,UAArC,SAAmD,MAAM,MAAzD,CAAN;AACH;;AAED,gBAAI;AACA,uBAAO,QAAQ,OAAR,CAAgB,WAAW,UAAX,EAAuB,IAAvB,CAA4B,IAA5B,EAAkC,IAAlC,CAAhB,CAAP;AACH,aAFD,CAEE,OAAO,GAAP,EAAY;AACV,uBAAO,QAAQ,MAAR,CAAe,GAAf,CAAP;AACH;AACJ,SAzBD;;AA2BA,eAAO,UAAC,GAAD,EAAS;AACZ,gBAAI,QAAQ,OAAO,IAAP,CAAY,IAAI,IAAhB,CAAZ;;AAEA,gBAAI,CAAC,KAAL,EAAY;AACR,oBAAI,MAAJ,GAAa,GAAb;AACA,sBAAM,IAAI,KAAJ,uBAA8B,IAAI,IAAlC,CAAN;AACH;;AAED,gBAAI,KAAJ,GAAY,KAAZ;;AAEA,mBAAO,IAAI,UAAJ,CAAe,MAAM,UAArB,EAAiC,MAAM,MAAvC,CAAP;AACH,SAXD;AAYH,KA3DD;AA4DH","file":"index.js","sourcesContent":["import { RouterBuilder, RoutesTranslations } from 'limosa';\n\nexport default function alpLimosa(routerBuilder, controllers) {\n    if (!controllers instanceof Map) {\n        throw new Error('controllers should be a Map');\n    }\n\n    return (app) => {\n        const config = app.config;\n        const routeTranslationsConfig = config.get('routeTranslations');\n        const routeTranslations = new RoutesTranslations(routeTranslationsConfig);\n        const builder = new RouterBuilder(routeTranslations, config.get('availableLanguages'));\n        routerBuilder(builder);\n        const router = app.router = builder.router;\n\n        app.context.urlGenerator = function () {\n            return router.urlGenerator(this.language, ...arguments); // eslint-disable-line prefer-rest-params\n        };\n\n        app.controllers = controllers;\n\n        /**\n         *\n         * @param {string} controllerName\n         * @param {string} actionName\n         * @returns {*}\n         */\n        app.context.callAction = function (controllerName, actionName) {\n            const route = this.route;\n\n            if (!actionName) {\n                actionName = controllerName;\n                controllerName = route.controller;\n            }\n\n            const controller = controllers.get(controllerName);\n            if (!controller) {\n                this.status = 404;\n                throw new Error(`Controller not found: ${controllerName}`);\n            }\n\n            const action = controller[actionName];\n            if (!action/* || !action.isAction*/) {\n                this.status = 404;\n                throw new Error(`Action not found: ${route.controller}.${route.action}`);\n            }\n\n            try {\n                return Promise.resolve(controller[actionName].call(null, this));\n            } catch (err) {\n                return Promise.reject(err);\n            }\n        };\n\n        return (ctx) => {\n            let route = router.find(ctx.path);\n\n            if (!route) {\n                ctx.status = 404;\n                throw new Error(`Route not found: ${ctx.path}`);\n            }\n\n            ctx.route = route;\n\n            return ctx.callAction(route.controller, route.action);\n        };\n    };\n}\n"]}